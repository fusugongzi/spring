<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--方式一:使用原生API接口-->
    <!--<bean id="beforelog" class="com.study.aop.log.BeforeLog"></bean>
    <bean id="afterlog" class="com.study.aop.log.AfterLog"></bean>
    <bean id="userservice" class="com.study.aop.service.UserServiceImpl"></bean>
-->
    <!--使用原生aop-->
    <!--配置aop,需要导入aop的约束-->
    <!--<aop:config>
        &lt;!&ndash;切入点 expression表达式 execution要执行的位置&ndash;&gt;
        <aop:pointcut id="pointcut" expression="execution(* com.study.aop.service.UserServiceImpl.*(..))"/>

        &lt;!&ndash;执行环绕增加&ndash;&gt;
        <aop:advisor advice-ref="beforelog" pointcut-ref="pointcut"></aop:advisor>
        <aop:advisor advice-ref="afterlog" pointcut-ref="pointcut"></aop:advisor>
    </aop:config>-->


    <!--方式二:自定义类-->
   <!-- <bean id="userservice" class="com.study.aop.service.UserServiceImpl"></bean>
    <bean id="diy" class="com.study.aop.diy.DiyPointCut"></bean>

    <aop:config>
        &lt;!&ndash;自定义切面, ref要引用的类&ndash;&gt;
        <aop:aspect ref="diy">
            &lt;!&ndash;切入点&ndash;&gt;
            <aop:pointcut id="pointcut" expression="execution(* com.study.aop.service.UserServiceImpl.*(..))"/>
            &lt;!&ndash;通知&ndash;&gt;
            <aop:before method="before" pointcut-ref="pointcut"></aop:before>
            <aop:after method="after" pointcut-ref="pointcut"></aop:after>
        </aop:aspect>
    </aop:config>-->

    <!--方法三:自定义注解-->
    <bean id="userservice" class="com.study.aop.service.UserServiceImpl"></bean>
    <bean id="annotationPointCut" class="com.study.aop.diy.AnnotationPointCut"></bean>
    <!--开启自定义注解的支持 aop动态代理的实现方式: jdk(proxy-target-class="false") cglib( proxy-target-class="true") -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

</beans>